const TargetableModule = require('./TargetableModule');

/**
 * A module that can be changed by a third party.
 *
 * When Webpack loads a module into its bundles, it processes the source code
 * through a set of rules generated by Buildpack. A PublicModule is a reference
 * to that source file, meant to be passed to interceptors. Inside
 * interceptors, extensions and projects can configure the PublicModule to
 * transform in many ways.
 */
class TargetableESModule extends TargetableModule {
    /**
     * Pass exports of this module through the function provided.
     * The passed function will be serialized and used on the frontend!
     *
     * It cannot use Node-only modules or refer to identifiers outside its closure.
     *
     * @param {string} [exportName] Name of export to wrap. If not provided, will wrap the default export.
     * @param {Function} wrapFunction - A higher-order function which should
     * transform the default export, or the named export, of the original
     * module.
     */
    wrap(name, wrapper) {
        const opts = this._normalizeWrapParameters(name, wrapper);
        opts.wrapperModule = this._addVirtualFile(
            `export default ${opts.wrapperModule.toString()}`
        );
        return this._wrapWithFile(opts);
    }

    /**
     * Pass exports of this module through a [wrapper module](#wrapper_modules).
     *
     * @param {string} [exportName] Name of export to wrap. If not provided, will wrap the default export.
     * @param {string} wrapperModule Import path to the wrapper module. Should be package-absolute.
     */
    wrapWithFile(name, wrapper) {
        return this._wrapWithFile(this._normalizeWrapParameters(name, wrapper));
    }

    /** @ignore */
    _normalizeWrapParameters(exportName, wrapperModule) {
        const normalized = {
            exportName: wrapperModule && exportName,
            wrapperModule: wrapperModule || exportName
        };
        if (!exportName) {
            normalized.defaultExport = true;
        }
        return normalized;
    }

    /** @ignore */
    _wrapWithFile(opts) {
        return this.addTransform(
            'source',
            '@magento/pwa-buildpack/lib/WebpackTools/loaders/wrap-esm-loader',
            opts
        );
    }
}

module.exports = TargetableESModule;
